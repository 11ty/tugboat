<!---
table-of-contents finds the anchor links in the content to create a table of contents
--->
<script webc:setup>
function getLevel(el) {
	return parseInt(el.tagName.slice(1), 10);
}
function generateHtml(headings) {
	let html = [];
	let previousLevel = 2;
	for(let el of headings) {
		let level = getLevel(el);
		if(level === previousLevel) {
			html.push("</li>");
		} else if(level < previousLevel) {
			html.push("</ul>")
		} else if(level > previousLevel) {
			html.push("<ul>")
		}

		let text = Array.from(el.childNodes).map(node => {
			if(node.nodeType === 3) {
				return node.nodeValue.trim();
			}
			return "";
		}).join("");
		html.push(`<li><a href="#${el.getAttribute("id")}">${text}</a>`);
		previousLevel = level;
	}
	return `<details open>
	<summary>On this page</summary>
	<ul>${html.join("")}</ul>
</details>`;
}
</script>
<style webc:scoped>
:host {
	display: block;
	margin: 1em 0;
}
:host ul {
	list-style: none;
	padding: 0;
	margin: .25em 0;
}
:host ul ul {
	margin-left: 1em;
}
:host li {
	margin: .75em 0;
}
:host a {
	display: block;
}
:host .active {
	font-weight: bold;
}
</style>
<script webc:type="js">
// selectFromHtml via linkedom in eleventy.config.cjs
let headings = selectFromHtml(content, ":is(h2, h3, h4, h5, h6)[id]" );
generateHtml(headings);
</script>

<script>
	class TableOfContents extends HTMLElement {
		static ACTIVE = "active";

		observe(targetsSelector) {
			let observer = new IntersectionObserver((entries) => {
				for (let entry of entries) {
					if(entry.isIntersecting) {
						let id = entry.target.getAttribute("id");
						let tocHeading = this.querySelector(`a[href="#${id}"]`);
						if(tocHeading) {
							let previousHeading = this.querySelector(`.${TableOfContents.ACTIVE}`);
							if(previousHeading) {
								previousHeading.classList.remove(TableOfContents.ACTIVE);
							}
							tocHeading.classList.add(TableOfContents.ACTIVE);
						}
						break;
					}
				}
			}, {
				rootMargin: "0px 0px -90% 0px",
				threshold: 1,
			});

			let headings = document.querySelectorAll(targetsSelector);
			for(let heading of headings) {
				observer.observe(heading);
			}
		}

		connectedCallback() {
			this.observe(":is(h2, h3, h4, h5, h6)[id]")
		}
	}

	if(("customElements" in window)) {
		window.customElements.define("table-of-contents", TableOfContents);
	}
	</script>